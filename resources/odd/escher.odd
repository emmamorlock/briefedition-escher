<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Alfred Escher-Briefedition</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="escher.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2021-01-20+01:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="escher" source="teipublisher.odd"> <elementSpec ident="note" mode="change">
                    <model predicate="@type=&#34;annotation&#34;" behaviour="inline" cssClass="annotation">
            <outputRendition xml:space="preserve">
            
            </outputRendition>
        </model>
                    <model predicate="@type='transcript'" behaviour="omit"/>
                    <model behaviour="note">
            <param name="place" value="@place"/>
            <param name="label" value="@n"/>
        </model>
                </elementSpec>
                <elementSpec ident="placeName" mode="add">
                    <model predicate="$parameters?header='context'" behaviour="block">
            <param name="label" value="@key/string()"/>
            <param name="uri" value="let $initial := substring(@key, 1, 1) return 'https://www.briefedition.alfred-escher.ch/kontexte/orte/' || $initial || '/' || @key"/>
            <param name="ref" value="@key"/>
            <pb:template xmlns="" xml:space="preserve"><paper-checkbox data-ref="[[ref]]"/><a href="[[uri]]" target="_blank">[[label]]</a></pb:template>
        </model>
                    <model behaviour="inline" cssClass="popover">
            <param name="content" value="."/>
            <param name="label" value="@key"/>
            <param name="ref" value="@key"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover data-ref="[[ref]]">
  <span slot="default">[[content]]</span>
  <span slot="alternate">[[label]]</span>
</pb-popover></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="choice" mode="change">
                    <model output="plain" predicate="sic and corr" behaviour="inline">
            <param name="content" value="corr[1]"/>
        </model>
                    <model output="plain" predicate="abbr and expan" behaviour="inline">
            <param name="content" value="expan[1]"/>
        </model>
                    <model output="plain" predicate="orig and reg" behaviour="inline">
            <param name="content" value="reg[1]"/>
        </model>
                    <model predicate="sic and corr" behaviour="alternate" cssClass="popover">
            <param name="default" value="sic[1]"/>
            <param name="alternate" value="corr[1]"/>
        </model>
                    <model predicate="abbr and expan" behaviour="alternate" cssClass="popover">
            <param name="default" value="abbr[1]"/>
            <param name="alternate" value="expan[1]"/>
        </model>
                    <model predicate="orig and reg" behaviour="alternate" cssClass="popover">
            <param name="default" value="orig[1]"/>
            <param name="alternate" value="reg[1]"/>
        </model>
                </elementSpec>
                <elementSpec ident="hi" mode="change">
                    <model predicate="@rend=&#34;underline&#34;" behaviour="inline" cssClass="underline tp-italic"/>
                    <model behaviour="inline"/>
                    <model predicate="@rend=&#34;sup&#34;" behaviour="inline" cssClass="sup"/>
                    <model predicate="@rendition" behaviour="inline" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="not(@rendition)" behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="supplied" mode="change">
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="lb" mode="change">
                    <model behaviour="line-break" cssClass="tp-linebreak"/>
                </elementSpec>
                <elementSpec ident="p" mode="change">
                    <model predicate="$parameters?header='commentary'" behaviour="block" cssClass="paragraph" pb:mode="indent">
            <param name="content" value="."/>
            <param name="number" value="count(preceding::p)"/>
            <pb:template xmlns="" xml:space="preserve"><div><span class="number">[[number]]</span>[[content]]</div></pb:template>
        </model>
                    <model predicate="$parameters?display='person-meta'" behaviour="paragraph"/>
                    <model behaviour="paragraph" cssClass="para" useSourceRendition="true"/>
                </elementSpec>

                <elementSpec ident="keywords" mode="add">
                    <model predicate="$parameters?header='short'" behaviour="inline" cssClass="subheading">
            <param name="keywords" value="sort(./term)"/>
            <pb:template xmlns="" xml:space="preserve"><div>Schlagwörter: [[keywords]]</div></pb:template>
        </model>
                    <model behaviour="pass-through">
            <param name="keywords" value="sort(./term)"/>
            <pb:template xmlns="" xml:space="preserve"><div class="keywords">Schlagwörter: [[keywords]]</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="item" mode="change">
                    <model predicate="$parameters?header=&#34;short&#34;" behaviour="inline"/>
                    <model behaviour="listItem"/>
                </elementSpec>
                <elementSpec ident="teiHeader" mode="change">
                    <model predicate="$parameters?header=&#34;commentary&#34;" behaviour="block">
            <param name="content" value="(./fileDesc/sourceDesc, ./fileDesc/titleStmt)"/>
        </model>
                    <model predicate="$parameters?header='context'" behaviour="pass-through">
            <param name="correspondents" value="let $label := &lt;head type=&#34;context&#34;&gt;Korrespondenten&lt;/head&gt;  let $entries:= .//correspDesc//(persName|orgName) return   (if ($entries) then $label else (), $entries)"/>
            <param name="dates" value="let $label := &lt;head type=&#34;context&#34;&gt;Briefdatum&lt;/head&gt; let $docType := root(.)/descendant-or-self::TEI/@type let $date := .//correspDesc//date return  if ($docType = 'Brief') then ($label, if (count($date)) then $date else 's.d.') else ()"/>
            <param name="persons" value="let $label := &lt;head type=&#34;context&#34;&gt;Personen&lt;/head&gt; let $entries:= for $p in root(.)//text//persName     let $k := $p/@key       group by $k       order by $k        return $p[1] return (if (count($entries)) then $label else (), $entries)"/>
            <param name="places" value="let $label := &lt;head type=&#34;context&#34;&gt;Orte&lt;/head&gt; let $entries:= for $p in root(.)//text//placeName     let $k := $p/@key       group by $k       order by $k        return $p[1] return (if (count($entries)) then $label else (), $entries)"/>
            <param name="letters" value="let $label := &lt;head type=&#34;context&#34;&gt;Briefe&lt;/head&gt; let $entries:= for $p in root(.)//text//ref[@type='letter'][not(./ancestor::note)]     let $k := $p/@target       group by $k       order by $k        return $p[1] return (if (count($entries)) then $label else (), $entries)"/>
            <param name="sum" value="let $label := &lt;head type=&#34;context&#34;&gt;Überblickskommentare&lt;/head&gt; let $entries:= for $p in root(.)//text//ref[@type='sum'][not(./ancestor::note)]      let $k := $p/@target       group by $k       order by $k        return $p[1] return (if (count($entries)) then $label else (), $entries)"/>
            <pb:template xmlns="" xml:space="preserve"><div class="context">
                        <h1>Kontexte</h1>
                        [[correspondents]]
                        [[dates]]
                        [[persons]]
                        [[places]]
                        [[letters]]
                        [[sum]]
                        </div></pb:template>
        </model>
                    <modelSequence predicate="$parameters?display='letter-header'">
            <model behaviour="pass-through">
                <param name="content" value="(root(.)//correspDesc/correspContext, root(.)//correspDesc/correspAction[@type='sent'])"/>
            </model>
            <model behaviour="inline" cssClass="subheading">
                <param name="id" value="substring-after(ancestor::TEI/@xml:id, 'K_')"/>
                <param name="ref" value="(.//msIdentifier/institution, ' ', .//msIdentifier/idno[@type='original'])"/>
                <param name="type" value="let $type:= .//msIdentifier/@type return if ($type != '') then ' (' || $type || ')' else ()"/>
                <pb:template xmlns="" xml:space="preserve">AES B[[id]] | [[ref]][[type]]</pb:template>
            </model>
            <model behaviour="block">
                <param name="content" value="fileDesc/titleStmt/title"/>
                <pb:set-param name="header" value="'short'"/>
            </model>
            <model behaviour="block">
                <param name="content" value=".//keywords[@scheme=&#34;http://briefedition.alfred-escher.ch/keywords&#34;]"/>
            </model>
        </modelSequence>
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="block"/>
            <model behaviour="block" cssClass="subheading">
                <param name="id" value="substring-after(ancestor::TEI/@xml:id, 'K_')"/>
                <pb:template xmlns="" xml:space="preserve">AES B[[id]]</pb:template>
            </model>
            <model behaviour="block">
                <param name="content" value=".//keywords[@scheme=&#34;http://briefedition.alfred-escher.ch/keywords&#34;]"/>
            </model>
        </modelSequence>
                    <model output="web" behaviour="metadata"/>
                </elementSpec>
            <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?header=&#34;commentary&#34; and parent::titleStmt" behaviour="heading" cssClass="letter-title">
            <param name="level" value="1"/>
        </model>
                    <model predicate="$parameters?header='context'" behaviour="inline"/>
                    <model predicate="$parameters?header='short'" behaviour="heading" cssClass="letter-title">
            <param name="level" value="2"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
                    <modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="date" mode="change">
                    <model output="web" predicate="$parameters?header='context' and @when and ancestor::correspDesc" behaviour="block">
            <param name="label" value="ec:format-date(.)"/>
            <param name="uri" value="let $date := replace(@when/string(), '-', '/') return 'https://www.briefedition.alfred-escher.ch/kontexte/chronologie/ansicht-tage/' || $date || '/'"/>
            <pb:template xmlns="" xml:space="preserve">
                                    <a href="[[uri]]" target="_blank">[[label]]</a>
                        </pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="persName" mode="add">
                    <model predicate="$parameters?display='person-meta'" behaviour="inline"/>
                    <model predicate="$parameters?header='context' and @key and ancestor::correspDesc" behaviour="block">
            <param name="label" value="."/>
            <param name="uri" value="'../kontexte/personen/' || @key"/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" target="_blank">[[label]]</a></pb:template>
        </model>
                    <model predicate="$parameters?header='context' and $parameters?url='commentary' and @key" behaviour="block">
            <desc>Checkboxes and links for the side panel: for the 2nd level, e.g. commentaries</desc>
            <param name="uri" value="'../personen/' || @key"/>
            <param name="label" value="@key"/>
            <param name="ref" value="@key"/>
            <pb:template xmlns="" xml:space="preserve"><paper-checkbox data-ref="[[ref]]"/><a href="[[uri]]" target="_blank">[[label]]</a></pb:template>
        </model>
                    <model predicate="$parameters?header='context' and @key" behaviour="block">
            <desc>Checkboxes and links for the side panel</desc>
            <param name="uri" value="'../kontexte/personen/' || @key"/>
            <param name="label" value="@key"/>
            <param name="ref" value="@key"/>
            <pb:template xmlns="" xml:space="preserve"><paper-checkbox data-ref="[[ref]]"/><a href="[[uri]]" target="_blank">[[label]]</a></pb:template>
        </model>
                    <model behaviour="inline" cssClass="popover">
            <param name="content" value="."/>
            <param name="label" value="@key"/>
            <param name="ref" value="@key"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover data-ref="[[ref]]">
                        <span slot="default">[[content]]</span>
                        <span slot="alternate">[[label]]</span>
                        </pb-popover>
                    </pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="ref" mode="change">
                    <model predicate="parent::correspContext and @type=&#34;previous-in-corresp&#34;" behaviour="pass-through">
            <param name="target" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><span data-path="briefe/[[target]]" class="prev"/></pb:template>
        </model>
                    <model predicate="parent::correspContext and @type=&#34;next-in-corresp&#34;" behaviour="pass-through">
            <param name="target" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><span data-path="briefe/[[target]]" class="next"/></pb:template>
        </model>
                    <model predicate="parent::correspContext and @type=&#34;previous&#34;" behaviour="pass-through">
            <param name="target" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><span data-path="briefe/[[target]]" class="prev-in-edition"/></pb:template>
        </model>
                    <model predicate="parent::correspContext and @type=&#34;next&#34;" behaviour="pass-through">
            <param name="target" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><span data-path="briefe/[[target]]" class="next-in-edition"/></pb:template>
        </model>
                    <model predicate="@type=&#34;kbp&#34;" behaviour="omit"/>
                    <model predicate="$parameters?header=&#34;commentary&#34; and @type=&#34;volume&#34;" behaviour="inline">
            <param name="content" value="(&#34;, S. &#34;, .)"/>
        </model>
                    <modelSequence predicate="$parameters?display='person-meta' or parent::note">
            <model predicate="@type='sum'" behaviour="inline">
                <param name="ref" value="@target"/>
                <param name="label" value="id(@target, doc(&#34;/db/apps/escher/data/titles.xml&#34;))/string()"/>
                <param name="uri" value="let $hash := replace(@target, '^[^_]+_?(.*)$', '$1') let $target := replace(@target, '^([^_]+).*$', '$1') return let $url-prefix := if ($parameters?url='commentary') then '../uberblickskommentare/' else '../kontexte/uberblickskommentare/'                             return  $url-prefix || $target || '#' || @target"/>
                <pb:template xmlns="" xml:space="preserve">
                    <a href="[[uri]]" class="note-link">[[label]]</a>
                </pb:template>
            </model>
            <model predicate="@type='letter'" behaviour="inline">
                <param name="letter" value="let $target := 'B' || replace(@target, '^(K_[^_]+).*$', '$1') return id($target, doc(&#34;/db/apps/escher/data/titles.xml&#34;))"/>
                <param name="uri" value="let $hash := replace(@target, '^K_[^_]+_?(.*)$', '$1') let $target := 'B' || replace(@target, '^K_([^_]+).*$', '$1') let $url-prefix := if ($parameters?url='commentary') then '../../briefe/' else '../briefe/' return  $url-prefix || $target || '#' || $hash"/>
                <param name="label" value="if (./string()) then (., ': ') else (id(@target, doc(&#34;/db/apps/escher/data/titles.xml&#34;))/string())"/>
                <param name="ref" value="@target"/>
                <pb:template xmlns="" xml:space="preserve">
                    <a href="[[uri]]" class="note-link">[[label]] [[letter]]</a>
                </pb:template>
            </model>
            <model predicate="@type='third-party-letter'" behaviour="inline"/>
            <model predicate="@type='lit'" behaviour="inline"/>
            <model predicate="ancestor::note and not(@type) and @target" behaviour="link" cssClass="external-link">
                <desc>A ref in a note, containing a target, but not a type, currently an external link</desc>
                <param name="uri" value="@target"/>
            </model>
        </modelSequence>
                    <model predicate="$parameters?header='context' and @type='sum'" behaviour="block">
            <param name="ref" value="@target"/>
            <param name="label" value="id(@target, doc(&#34;/db/apps/escher/data/titles.xml&#34;))"/>
            <param name="uri" value="let $hash := replace(@target, '^[^_]+_?(.*)$', '$1') let $target := replace(@target, '^([^_]+).*$', '$1') return let $url-prefix := if ($parameters?url='commentary') then '../uberblickskommentare/' else '../kontexte/uberblickskommentare/' return  $url-prefix || $target || '#' || @target"/>
            <pb:template xmlns="" xml:space="preserve">
                <paper-checkbox data-ref="[[ref]]"/>
                <a href="[[uri]]">[[label]]</a>
            </pb:template>
        </model>
                    <model predicate="$parameters?header='context' and @type='letter'" behaviour="block">
            <param name="letter" value="let $target := replace(@target, '^(K_[^_]+).*$', '$1') return id($target, doc(&#34;/db/apps/escher/data/titles.xml&#34;))"/>
            <param name="uri" value="let $hash := replace(@target, '^K_[^_]+_?(.*)$', '$1') let $target := 'B' || replace(@target, '^K_([^_]+).*$', '$1') let $url-prefix := if ($parameters?url='commentary') then '../../briefe/' else '../briefe/' return  $url-prefix || $target || '#' || $hash"/>
            <param name="label" value="if (./string()) then (., ': ') else ()"/>
            <param name="ref" value="@target"/>
            <pb:template xmlns="" xml:space="preserve">
                            <paper-checkbox data-ref="[[ref]]"/>
                            <a href="[[uri]]">[[label]] [[letter]]</a>
                        </pb:template>
        </model>
                    <model predicate="@type='sum'" behaviour="inline">
            <desc>Description link displaying an icon. If target ends with _d add Kapitel, _p Absatz</desc>
            <param name="ref" value="@target"/>
            <param name="label" value="id(@target, doc(&#34;/db/apps/escher/data/titles.xml&#34;))"/>
            <param name="uri" value="let $hash := replace(@target, '^[^_]+_?(.*)$', '$1') let $target := replace(@target, '^([^_]+).*$', '$1') return let $url-prefix := if ($parameters?url='commentary') then '../uberblickskommentare/' else '../kontexte/uberblickskommentare/' return  $url-prefix || $target || '#' || @target"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover data-ref="[[ref]]">
                    <span slot="default">
                        <a href="[[uri]]">
                            <iron-icon icon="icons:description"/>
                        </a>
                    </span>
                    <span slot="alternate">[[label]]</span>
                </pb-popover>
            </pb:template>
        </model>
                    <model predicate="@type='letter'" behaviour="inline">
            <desc>Letter link displaying an icon</desc>
            <param name="ref" value="@target"/>
            <param name="label" value="let $target := replace(@target, '^(K_[^_]+).*$', '$1') return id($target, doc(&#34;/db/apps/escher/data/titles.xml&#34;))"/>
            <param name="uri" value="let $hash := replace(@target, '^K_[^_]+_?(.*)$', '$1') let $target := 'B' || replace(@target, '^K_([^_]+).*$', '$1') let $url-prefix := if ($parameters?url='commentary') then '../../briefe/' else '../briefe/' return  $url-prefix || $target || '#' || $hash"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover data-ref="[[ref]]">
                    <span slot="default">
                        <a href="[[uri]]">
                            <iron-icon icon="icons:mail"/>
                        </a>
                    </span>
                    <span slot="alternate">[[label]]</span>
                </pb-popover>
            </pb:template>
        </model>
                    <model predicate="@type='third-party-letter'" behaviour="inline"/>
                    <model predicate="@type='lit'" behaviour="inline"/>
                    <model predicate="$parameters?header='context' and @type='sum'" behaviour="block">
            <param name="ref" value="@target"/>
            <param name="label" value="let $hash := replace(@target, '^[^_]+_?(.*)$', '$1') let $target := replace(@target, '^([^_]+).*$', '$1') let $title := id($target, doc(&#34;/db/apps/escher/data/titles.xml&#34;)) return  if ($hash) then       if (starts-with($hash, 'd')) then           ($title, ', Kapitel ', substring-after($hash, 'd'))       else           ($title, ', Absatz ', substring-after($hash, 'p'))     else      $title"/>
            <param name="uri" value="let $target := @target              let $id := collection('/db/apps/escher/data')/id($target)/ancestor-or-self::TEI/@xml:id             return if ($id != $target) then $id || '#' || $target else $id"/>
            <pb:template xmlns="" xml:space="preserve"><paper-checkbox data-ref="[[ref]]"/><a href="[[uri]]">[[label]]</a></pb:template>
        </model>
                    <model predicate="$parameters?header='context' and @type='letter'" behaviour="block">
            <param name="letter" value="let $target := @target return collection('/db/apps/escher/data/briefe')/id($target)/ancestor-or-self::TEI//titleStmt/title"/>
            <param name="uri" value="let $target := @target                     let $letter := collection('/db/apps/escher/data/briefe')/id($target)/ancestor-or-self::TEI                     let $letter-id := 'B' || substring-after($letter/@xml:id, 'K_')                     let $url-prefix := if ($parameters?url='commentary') then '../../briefe/' else '../briefe/'                     let $url-target := if (@target != $letter/@xml:id) then '#' || @target else ()                         return if ($letter) then $url-prefix || $letter-id || $url-target else () "/>
            <param name="label" value="if (./string()) then (., ': ') else ()"/>
            <param name="ref" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><paper-checkbox data-ref="[[ref]]"/><a href="[[uri]]">[[label]] [[letter]]</a></pb:template>
        </model>
                    <model predicate="@type='third-party-letter'" behaviour="inline"/>
                    <model predicate="@type='lit'" behaviour="inline"/>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="link">
            <param name="uri" value="@target"/>
        </model>
                </elementSpec>
    <elementSpec ident="body" mode="change">
                    <modelSequence>
            <model behaviour="index">
                <param name="type" value="'toc'"/>
            </model>
            <model behaviour="facsimiles"/>
            <model behaviour="block"/>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="emph" mode="add">
                    <model behaviour="inline" cssClass="emph"/>
                </elementSpec>
                <elementSpec ident="person" mode="add">
                    <modelSequence predicate="$parameters?display = 'person-meta'">
            <desc>Personenansicht</desc>
            <model behaviour="heading">
                <param name="content" value="(persName, &#34; | &#34;, birth, &#34;–&#34;, death)"/>
                <param name="level" value="2"/>
            </model>
            <model behaviour="block">
                <param name="content" value="(figure/graphic[1], note[@type='bio']/node(), bibl)"/>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="author" mode="change">
                    <model predicate="ancestor::teiHeader" behaviour="block"/>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="bibl" mode="change">
                    <model predicate="$parameters?header=&#34;commentary&#34;" behaviour="heading">
            <param name="content" value="(title[@type=&#34;short&#34;], ref[@type=&#34;volume&#34;])"/>
            <param name="level" value="3"/>
        </model>
                    <model predicate="parent::listBibl" behaviour="listItem"/>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="head" mode="change">
                    <model predicate="($parameters?header=&#34;commentary&#34; or $parameters?header=&#34;subsections&#34;) and count(ancestor::div) = 1" behaviour="omit">
            <desc>Omit first heading in the commentary document, since it is the same as the document title</desc>
        </model>
                    <model predicate="$parameters?header=&#34;subsections&#34;" behaviour="heading" cssClass="subsection">
            <param name="level" value="3"/>
            <param name="uri" value="parent::div/@xml:id"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><pb-link hash="[[uri]]" emit="transcription">[[content]]</pb-link></pb:template>
        </model>
                    <model predicate="@type=&#34;context&#34;" behaviour="heading" cssClass="context">
            <param name="level" value="3"/>
        </model>
                    <model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model>
                    <model predicate="parent::figure" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model predicate="parent::div" behaviour="heading">
            <param name="level" value="count(ancestor::div)"/>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
            <elementSpec ident="div" mode="change">
                    <model predicate="@type='signature'" behaviour="block" cssClass="signature"/>
                    <model predicate="@type='closer'" behaviour="block" cssClass="closer"/>
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="text" mode="change">
                    <model predicate="$parameters?header=&#34;subsections&#34;" behaviour="block">
            <param name="content" value=".//head"/>
        </model>
                    <model predicate="$parameters?display='person-meta'" behaviour="listItem">
            <param name="content" value="root($parameters?root)//titleStmt"/>
        </model>
                    <modelSequence>
            <model behaviour="pass-through">
                <desc>Output the letter id</desc>
                <param name="id" value="let $id := root(.)/TEI/@xml:id return  if (starts-with($id, 'K_')) then      &#34;B&#34; || substring($id, 3)     else      $id"/>
                <pb:template xmlns="" xml:space="preserve"><span class="text" data-letter="[[id]]"/></pb:template>
            </model>
            <model behaviour="section">
                <desc>Set regions variable for facsimiles and output section</desc>
                <pb:set-param name="regions" value="for $id in root(.)/TEI/@xml:id return collection('/db/apps/escher/data/regions')/Q{}mappingtable/Q{}doc[@id=$id]"/>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="titleStmt" mode="change">
                    <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
                    <model output="fo" behaviour="heading"/>
                    <model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not(@type)]"/>
            <param name="level" value="5"/>
        </model>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="&#34;B&#34; || substring-after(ancestor::TEI/@xml:id, &#34;K_&#34;)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
        </modelSequence>
                    <model output="web" behaviour="block"/>
                </elementSpec>
                <elementSpec ident="pb" mode="change">
                    <model predicate="$parameters?header='subsections' or $parameters?header='commentary'" behaviour="omit"/>
                    <model behaviour="alternate" cssClass="pb" useSourceRendition="true">
            <param name="default" value="' | '"/>
            <param name="alternate" value="'Seitenumbruch'"/>
        </model>
                </elementSpec>
            <elementSpec ident="TEI" mode="change">
                    <model predicate="$parameters?header='context'" behaviour="pass-through">
            <param name="content" value="teiHeader"/>
        </model>
                    <model behaviour="document">
            <param name="content" value="text"/>
        </model>
                </elementSpec>
            <elementSpec ident="correspContext" mode="add">
                    <model behaviour="pass-through">
            <param name="nav-overall" value="(ref[@type='previous'], ref[@type='next'])"/>
            <param name="nav-corresp" value="(ref[@type='previous-in-corresp'], ref[@type='next-in-corresp'])"/>
            <pb:template xmlns="" xml:space="preserve"><nav class="corresp" style="display: none">
  [[nav-overall]]
  [[nav-corresp]]
</nav></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="term" mode="add">
                    <model predicate="$parameters?display='letter-header'" behaviour="link" cssClass="term">
            <param name="uri" value="'.?facet-keyword=' || ."/>
        </model>
                    <model behaviour="link" cssClass="term"/>
                </elementSpec>
            <elementSpec ident="add" mode="change">
                    <model predicate="@type='?'" behaviour="inline" cssClass="unclear-addition"/>
                    <model behaviour="inline" cssClass="addition"/>
                </elementSpec>
                <elementSpec ident="del" mode="change">
                    <model behaviour="inline" cssClass="deletion">
            <outputRendition xml:space="preserve">
            text-decoration: line-through;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="correspAction" mode="add">
                    <model predicate="$parameters?display='letter-header'" behaviour="pass-through">
            <param name="content" value="((persName|orgName)[@type='sender'], ' – ', (persName|orgName)[@type='addressee'])"/>
            <pb:template xmlns="" xml:space="preserve"><span class="correspondence" style="display: none">[[content]]</span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="metamark" mode="add">
                    <model behaviour="inline" cssClass="metamark"/>
                </elementSpec>
                <elementSpec ident="graphic" mode="change">
                    <model behaviour="graphic">
            <param name="url" value="'../resources/images/person/' || @url"/>
            <param name="width" value="@width"/>
            <param name="height" value="@height"/>
            <param name="scale" value="@scale"/>
            <param name="title" value="desc"/>
            <outputRendition xml:space="preserve">
            
            
                            float: right; 
                            margin-left: 20px;
                        
            
            </outputRendition>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>