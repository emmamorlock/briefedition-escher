<?xml-model href="teipublisher_odds.xsd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Alfred Escher-Briefedition</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="escher.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2021-01-20+01:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="escher" source="teipublisher.odd"> <elementSpec ident="note" mode="change">
                    <model predicate="@type=&#34;annotation&#34;" behaviour="inline" cssClass="annotation">
            <outputRendition xml:space="preserve">
            
            </outputRendition>
        </model>
                    <model behaviour="note">
            <param name="place" value="@place"/>
            <param name="label" value="@n"/>
        </model>
                </elementSpec>
                <elementSpec ident="placeName" mode="add">
                    <model predicate="$parameters?header='context'" behaviour="block">
            <param name="label" value="@key/string()"/>
            <param name="uri" value="let $initial := substring(@key, 1, 1) return 'https://www.briefedition.alfred-escher.ch/kontexte/orte/' || $initial || '/' || @key"/>
            <param name="ref" value="@key"/>
            <pb:template xmlns="" xml:space="preserve"><paper-checkbox data-ref="[[ref]]"/><a href="[[uri]]" target="_blank">[[label]]</a></pb:template>
        </model>
                    <model behaviour="inline" cssClass="popover">
            <param name="content" value="."/>
            <param name="label" value="@key"/>
            <param name="ref" value="@key"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover data-ref="[[ref]]">
  <span slot="default">[[content]]</span>
  <span slot="alternate">[[label]]</span>
</pb-popover></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="choice" mode="change">
                    <model output="plain" predicate="sic and corr" behaviour="inline">
            <param name="content" value="corr[1]"/>
        </model>
                    <model output="plain" predicate="abbr and expan" behaviour="inline">
            <param name="content" value="expan[1]"/>
        </model>
                    <model output="plain" predicate="orig and reg" behaviour="inline">
            <param name="content" value="reg[1]"/>
        </model>
                    <model predicate="sic and corr" behaviour="alternate" cssClass="popover">
            <param name="default" value="sic[1]"/>
            <param name="alternate" value="corr[1]"/>
        </model>
                    <model predicate="abbr and expan" behaviour="alternate" cssClass="popover">
            <param name="default" value="abbr[1]"/>
            <param name="alternate" value="expan[1]"/>
        </model>
                    <model predicate="orig and reg" behaviour="alternate" cssClass="popover">
            <param name="default" value="orig[1]"/>
            <param name="alternate" value="reg[1]"/>
        </model>
                </elementSpec>
                <elementSpec ident="hi" mode="change">
                    <model predicate="@rend=&#34;underline&#34;" behaviour="inline" cssClass="underline"/>
                    <model behaviour="inline"/>
                    <model predicate="@rend=&#34;sup&#34;" behaviour="inline" cssClass="sup"/>
                    <model predicate="@rendition" behaviour="inline" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="not(@rendition)" behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="supplied" mode="change">
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="lb" mode="change">
                    <model behaviour="line-break" cssClass="line" useSourceRendition="true"/>
                </elementSpec>
            <elementSpec ident="p" mode="change">
                    <model predicate="$parameters?display='person-meta'" behaviour="paragraph"/>
                    <model predicate="@rend=&#34;right&#34;" behaviour="paragraph">
            <outputRendition xml:space="preserve">
            text-align: right;
            </outputRendition>
        </model>
                    <model behaviour="paragraph" cssClass="indent" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            text-align: justify;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="keywords" mode="add">
                    <model behaviour="inline" cssClass="subheading">
            <param name="keywords" value="string-join(for $k in .//item order by $k return $k, ', ')"/>
            <pb:template xmlns="" xml:space="preserve"><div>Schlagwörter: [[keywords]]</div></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="item" mode="change">
                    <model predicate="$parameters?header=&#34;short&#34;" behaviour="inline"/>
                    <model behaviour="listItem"/>
                </elementSpec>
                <elementSpec ident="teiHeader" mode="change">
                    <model predicate="$parameters?header=&#34;commentary&#34;" behaviour="block">
            <param name="content" value="(./fileDesc/sourceDesc, ./fileDesc/titleStmt)"/>
        </model>
                    <model predicate="$parameters?header='context'" behaviour="inline">
                        <param name="correspondents" value=".//correspDesc//persName"/>
                        <param name="dates" value=".//correspDesc//date/@when"/>
                        <param name="persons" value="for $p in root(.)//text//persName     let $k := $p/@key       group by $k       order by $k        return $p[1]"/>
                        <param name="places" value="for $p in root(.)//text//placeName     let $k := $p/@key       group by $k       order by $k        return $p[1]"/>
                        <param name="letters" value="for $p in root(.)//text//ref[@type='letter']     let $k := $p/@target       group by $k       order by $k        return $p[1]"/>
                        <param name="sum" value="for $p in root(.)//text//ref[@type='sum']     let $k := $p/@target       group by $k       order by $k        return $p[1]"/>
                        <pb:template xmlns="" xml:space="preserve">
                            <div>
                                <h4>Korrespondenten</h4>
                                [[correspondents]]

                                <h4>Briefdatum</h4>
                                [[dates]]

                                <h4>Personen</h4>
                                [[persons]]

                                <h4>Orte</h4>
                                [[places]]

                                <h4>Briefe</h4>
                                [[letters]]

                                <h4>Überblickskommentare</h4>
                                [[sum]]
                            </div>
                        </pb:template>
                    </model>
                    <modelSequence predicate="$parameters?display='letter-header'">
                        <model behaviour="inline" cssClass="subheading">
                            <param name="id" value="substring-after(ancestor::TEI/@xml:id, 'K_')"/>
                            <param name="ref" value="(.//msIdentifier/institution, ' ', .//msIdentifier/idno[@type='original'])"/>
                            <param name="type" value="let $type:= .//msIdentifier/@type return if ($type != '') then ' (' || $type || ')' else ()"/>
                            <pb:template xmlns="" xml:space="preserve">AES B[[id]] | [[ref]][[type]]</pb:template>
                        </model>
                        <model behaviour="block">
                            <pb:set-param name="header" value="'short'"/>
                            <param name="content" value="fileDesc/titleStmt/title"/>
                        </model>
                        <model behaviour="block">
                            <pb:set-param name="header" value="'short'"/>
                            <param name="content" value=".//keywords"/>
                        </model>
                    </modelSequence>
                    <model output="latex" behaviour="metadata"/>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" behaviour="metadata"/>
                </elementSpec>
            <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?header=&#34;commentary&#34; and parent::titleStmt" behaviour="heading">
            <param name="level" value="2"/>
        </model>
                    <model predicate="$parameters?header='context'" behaviour="inline"/>
                    <model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="2"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' — '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
                    <modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition xml:space="preserve">
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="date" mode="add">
                    <model predicate="$parameters?header='context' and @when and ancestor::correspDesc" behaviour="block">
            <param name="label" value="ec:format-date(@when)"/>
            <param name="uri" value="let $date := replace(@when/string(), '-', '/') return 'https://www.briefedition.alfred-escher.ch/kontexte/chronologie/ansicht-tage/' || $date || '/'"/>
            <pb:template xmlns="" xml:space="preserve">
                        <a href="[[uri]]" target="_blank">[[label]]</a>
                    </pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="persName" mode="add">
                    <model predicate="$parameters?display='person-meta'" behaviour="inline"/>
                    <model predicate="$parameters?header='context' and @key and ancestor::correspDesc" behaviour="block">
            <param name="label" value="."/>
            <param name="uri" value="'../kontexte/personen/' || @key"/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" target="_blank">[[label]]</a></pb:template>
        </model>
                    <model predicate="$parameters?header='context' and ancestor::correspDesc" behaviour="block"/>
                    <model predicate="$parameters?header='context'" behaviour="block">
            <param name="uri" value="let $initial := substring(@key, 1, 1) return 'https://www.briefedition.alfred-escher.ch/kontexte/personen/korrespondenten-und-erwahnte-personen/' || $initial || '/' || @key/string() || '/'"/>
            <param name="label" value="@key"/>
            <param name="ref" value="@key"/>
            <pb:template xmlns="" xml:space="preserve"><paper-checkbox data-ref="[[ref]]"/><a href="[[uri]]" target="_blank">[[label]]</a></pb:template>
        </model>
                    <model behaviour="inline" cssClass="popover">
            <param name="content" value="."/>
            <param name="label" value="@key"/>
            <param name="ref" value="@key"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover data-ref="[[ref]]">
  <span slot="default">[[content]]</span>
  <span slot="alternate">[[label]]</span>
</pb-popover></pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="ref" mode="change">
                    <model predicate="@type=&#34;kbp&#34;" behaviour="omit"/>
                    <model predicate="$parameters?header=&#34;commentary&#34; and @type=&#34;volume&#34;" behaviour="inline">
            <param name="content" value="(&#34;, S. &#34;, .)"/>
        </model>
                    <model predicate="$parameters?header='context' and @type='sum'" behaviour="block">
            <param name="ref" value="@target"/>
            <param name="label" value="@target"/>
            <param name="uri" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><paper-checkbox data-ref="[[ref]]"/><a href="[[uri]]">[[label]]</a></pb:template>
        </model>
                    <model predicate="$parameters?header='context' and @type='letter'" behaviour="block">
            <param name="label" value="."/>
            <param name="letter" value="let $target := @target return collection('/db/apps/escher/data/letters')/id($target)//titleStmt/title"/>
            <param name="uri" value="let $target := @target              let $letter := collection('/db/apps/escher/data/letters')/id($target)             return              if ($letter) then util:document-name($letter) else () "/>
            <param name="ref" value="@target"/>
            <pb:template xmlns="" xml:space="preserve"><paper-checkbox data-ref="[[ref]]"/><a href="[[uri]]">[[label]]: [[letter]]</a></pb:template>
        </model>
                    <model predicate="@type='letter'" behaviour="inline">
            <param name="ref" value="@target"/>
            <param name="label" value="let $target := @target return collection('/db/apps/escher/data/letters')/id($target)//titleStmt/title/string()"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover data-ref="[[ref]]">
  <span slot="default"><iron-icon icon="icons:mail"/></span>
  <span slot="alternate">[[label]]</span>
</pb-popover></pb:template>
        </model>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="link">
            <param name="uri" value="@target"/>
        </model>
                </elementSpec>
                <elementSpec ident="body" mode="change">
                    <modelSequence>
            <model behaviour="index">
                <param name="type" value="'toc'"/>
            </model>
            <model behaviour="facsimiles"/>
            <model behaviour="block"/>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="emph" mode="add">
                    <model behaviour="inline" cssClass="emph"/>
                </elementSpec>
                <elementSpec ident="person" mode="add">
                    <modelSequence predicate="$parameters?display = 'person-meta'">
            <desc>Personenansicht</desc>
            <model behaviour="heading">
                <param name="content" value="(persName, &#34; | &#34;, birth, &#34;–&#34;, death)"/>
                <param name="level" value="2"/>
            </model>
            <model behaviour="block">
                <param name="content" value="note[@type='bio']/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
            <elementSpec ident="author" mode="change">
                    <model predicate="ancestor::teiHeader" behaviour="block"/>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="bibl" mode="change">
                    <model predicate="$parameters?header=&#34;commentary&#34;" behaviour="heading">
            <param name="content" value="(title[@type=&#34;short&#34;], ref[@type=&#34;volume&#34;])"/>
            <param name="level" value="3"/>
        </model>
                    <model predicate="parent::listBibl" behaviour="listItem"/>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="head" mode="change">
                    <model predicate="($parameters?header=&#34;commentary&#34; or $parameters?header=&#34;subsections&#34;) and count(ancestor::div) = 1" behaviour="omit">
            <desc>Omit first heading in the commentary document, since it is the same as the document title</desc>
        </model>
                    <model predicate="$parameters?header=&#34;subsections&#34;" behaviour="heading" cssClass="subsection">
            <param name="level" value="3"/>
            <param name="uri" value="parent::div/@xml:id"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><a href="#[[uri]]">[[content]]</a></pb:template>
        </model>
                    <model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model>
                    <model predicate="parent::figure" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model predicate="parent::div" behaviour="heading">
            <param name="level" value="count(ancestor::div)"/>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
            <elementSpec ident="div" mode="change">
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="text" mode="change">
                    <model predicate="$parameters?header=&#34;subsections&#34;" behaviour="block">
                        <param name="content" value=".//head"/>
                    </model>
                    <model predicate="$parameters?display='person-meta'" behaviour="listItem">
                        <param name="content" value="root($parameters?root)//titleStmt"/>
                    </model>
                    <model behaviour="body">
                        <pb:set-param name="regions" value="let $id := root(.)/TEI/@xml:id return collection('/db/apps/escher/data/regions')/mappingtable/doc[@id=$id]"/>
                    </model>
                </elementSpec>
            <elementSpec ident="titleStmt" mode="change">
                    <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
                    <model output="fo" behaviour="heading"/>
                    <model predicate="$parameters?mode='title'" behaviour="heading">
            <param name="content" value="title[not(@type)]"/>
            <param name="level" value="5"/>
        </model>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="uri" value="&#34;briefe/B&#34; || substring-after(ancestor::TEI/@xml:id, &#34;K_&#34;)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
        </modelSequence>
                    <model output="web" behaviour="block"/>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>